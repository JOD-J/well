// ? ====================================================== defer async ======================================================
// *! 	<script src="./js/script.js" defer></script>
// * defer поставит на загрузку файл со js запустит файл со js после загрузки html страницы
// * async поставит на загрузку файл со js запускает html после загрузки файла js останавливает загрузку html запускает js файл
// * работает только для внешних сылок
// ? ====================================================== defer async ======================================================


// ? ====================================================== Строгий режим ======================================================
// *! Строгий режим
// *! 'use strict';
// * Использует более строгий режим js, код более оптимизирован;
// * писать в наале js-файла;
// ? ====================================================== Строгий режим ======================================================


// ? ====================================================== Комментарии======================================================
//! Комментарии
// * "//" - Одинострочный коммент - ctrl + /
// * "/* */" - Многострочный комментарий

// ? ====================================================== Комментарии ======================================================


// ? ====================================================== Логические операторы ======================================================
//! Логические операторы
// * Приоритет оператора && больше, чем у ||
// * Приоритет оператора И && больше, чем ИЛИ || , так что он выполняется раньше.
// * Таким образом, код a && b || c && d по существу такой же, как если бы выражения && были в круглых скобках: (a && b) || (c && d).

// * Несмотря на своё название, данные операторы могут применяться к значениям любых типов данных. Полученные результаты также могут иметь различный тип. Логические операторы предназначены для манипулирования булевыми значениями.
// * && и
// * В традиционном программировании И возвращает true, если оба аргумента истинны, а иначе – false:
// * проверяет в условном операторе с лево на право все аргументы если каждый аругмент истина в булевом значение тогда вернет true
// *! Оператор && выполняет следующие действия:
// * Вычисляет операнды слева направо.
// * Каждый операнд преобразует в логическое значение. Если результат false, останавливается и возвращает исходное значение этого операнда.
// * Если все операнды были истинными, возвращается последний.
let numOne = 1;
let numTwo = 2;
if (numOne === 1 && numTwo === 2) {
	// console.log(true);
};
// * || или 
// * Традиционно в программировании ИЛИ предназначено только для манипулирования булевыми значениями: в случае, если какой-либо из аргументов true, он вернёт true, в противоположной ситуации возвращается false. 
// * проверяет в условном операторе с лево на право все аргументы первый аргумент который вернет true с этого момента код в условие прекратит проверяться.
// *! Оператор || выполняет следующие действия:
// * Вычисляет операнды слева направо.
// * Каждый операнд конвертирует в логическое значение. Если результат true, останавливается и возвращает исходное значение этого операнда.
// * Если все операнды являются ложными (false), возвращает последний из них.
// * Значение возвращается в исходном виде, без преобразования.
if (numOne === 1 || numTwo === 2) {
	// console.log(true);
};
// * ! не
// *! Оператор ! выполняет следующие действия:
// * Сначала приводит аргумент к логическому типу true/false.
// * Затем возвращает противоположное значение.
// * число 1 в булевом значение равен true значит если перед 1 поставить ! то из true получиться false !1
// * число 0 в булевом значение равен false значит если перед 0 поставить ! то из false получиться true !1
let numOnes = 1;
// console.log('numOnes: ', numOnes);
// console.log('numOnes: ', !numOnes);
let numTwos = 0;
// console.log('numTwos: ', numTwos);
// console.log('numTwos: ', !numTwos);
// ? ====================================================== Логические операторы ======================================================


// ? ====================================================== Операторы сравнения ======================================================
//! Операторы сравнения
// * Операторы сравнения предназначены для манипулирования булевыми значениями
let x = 1;
let y = '1';
let result;
// * x == y - равно;
result = x == y;
// console.log('result: ', result);
// * x === y - строго равно;
result = x === y;
// console.log('result: ', result);
// * x != y - не равно;
result = x != y;
// console.log('result: ', result);
// * x !== y - строго не равно;
result = x !== y;
// console.log('result: ', result);
// * x > y - больше;
result = x > y;
// console.log('result: ', result);
// * x < y - меньше;
result = x < y;
// console.log('result: ', result);
// * x >= y - больше или равно;
result = x >= y;
// console.log('result: ', result);
// * x <= y - меньше или равно;
result = x <= y;
// console.log('result: ', result);
// ? ====================================================== Операторы сравнения ======================================================


// ? ====================================================== типы данных ======================================================
//! типы данных
let number = 1;
// * тип данных число 
let string = 'string';
// * тип данных строка
let booleanTrue = true;
// * тип данных булевое значение принимает в себя true или false
let booleanFalse = false;
// * тип данных булевое значение принимает в себя true или false
let nulls = null;
// * тип данных null
let undefineds = undefined;
// * тип данных undefined
let arr = [];
// * тип данных обьект но создаеться масивв
let obj = {};
// * тип данных обьект но создаеться обьект они отличаютсья от масива
// ? ====================================================== типы данных ======================================================